{"version":3,"sources":["Problem.tsx","ResultCanvas.tsx","Utils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseInput","text","input","split","R","Number","C","L","H","board","slice","parseOutput","size","slices","map","line","l","ResultCanvas","_React$Component","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","updateCanvas","bind","assertThisInitialized","inherits","createClass","key","value","ctx","refs","canvas","getContext","fillStyle","fillRect","width","height","output","steps","forEach","r","_r","slicedToArray","r1","c1","r2","c2","react_default","a","createElement","ref","React","Component","readFile","_x","_readFile","apply","arguments","_callee","file","fileReader","regenerator_default","wrap","_context","prev","next","FileReader","abrupt","Promise","resolve","reject","onerror","abort","onload","result","readAsText","stop","SimpleSlider","handleChange","e","v","onChange","setState","index_es","variant","Slider_default","min","max","step","App","message","loadInputFile","loadOutputFile","event","_this2","target","files","Utils","then","Problem","catch","err","console","error","_this3","_this4","canvasHeight","isNull","canvasWidth","totalSteps","length","gutterBottom","container","spacing","item","xs","accept","type","id","Utils_SimpleSlider","_","ResultCanvas_ResultCanvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35716a14.chunk.js","sourcesContent":["export interface Input {\n    R: number,\n    C: number,\n    L: number,\n    H: number,\n    board: Array<String>,\n}\n\nexport function parseInput(text: string): Input {\n    let input = text.split(/[\\n\\s\\r\\t]+/);\n\n    let R = Number(input[0]);\n    let C = Number(input[1]);\n    let L = Number(input[2]);\n    let H = Number(input[3]);\n    let board = input.slice(4, 4 + R);\n    return {\n        R: R, C: C, L: L, H: H, board: board\n    };\n}\n\nexport interface Output {\n    slices: Array<[number, number, number, number]>\n}\n\nexport function parseOutput(text: string): Output {\n    let input = text.split(/[\\n\\r]+/);\n    let size = Number(input[0]);\n    let slices: Array<[number, number, number, number]> = input.slice(1, 1 + size).map((line) => {\n        let l = line.split(/[\\s\\t]+/);\n        let r1 = Number(l[0]);\n        let c1 = Number(l[1]);\n        let r2 = Number(l[2]);\n        let c2 = Number(l[3]);\n        let a: [number, number, number, number] = [r1, c1, r2, c2];\n        return a;\n    });\n    return { slices: slices };\n}\n\n","import React from 'react';\nimport * as Problem from \"./Problem\";\n\ninterface CanvasProps {\n    width: number,\n    height: number\n    input: null | Problem.Input,\n    output: null | Problem.Output,\n    steps: number,\n}\n\ninterface CanvasState { }\n\nexport class ResultCanvas extends React.Component<CanvasProps, CanvasState> {\n\n    constructor(props: CanvasProps, context?: any) {\n        super(props, context);\n        this.state = {};\n        this.updateCanvas = this.updateCanvas.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        let ctx: CanvasRenderingContext2D = (this.refs.canvas as any).getContext(\"2d\");\n        ctx.fillStyle = \"gray\";\n        ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n        if (this.props.output) {\n            this.props.output.slices.slice(0, this.props.steps).forEach(r => {\n                let [r1, c1, r2, c2] = r;\n                ctx.fillStyle = \"green\";\n                ctx.fillRect(c1, r1, c2 - c1 + 1, r2 - r1 + 1);\n            });\n        }\n\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref=\"canvas\" width={this.props.width} height={this.props.height} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Slider from \"@material-ui/lab/Slider\";\nimport { Typography } from '@material-ui/core';\n\nexport async function readFile(file: any): Promise<string> {\n    let fileReader = new FileReader();\n    return new Promise<string>((resolve, reject) => {\n        fileReader.onerror = () => {\n            fileReader.abort();\n            reject();\n        };\n        fileReader.onload = () => {\n            if (typeof fileReader.result === \"string\") {\n                resolve(fileReader.result);\n            } else {\n                reject();\n            }\n        };\n        fileReader.readAsText(file);\n    });\n}\n\ninterface SliderState {\n    value: number,\n}\n\ninterface SliderProps {\n    min: number,\n    max: number,\n    onChange?: (e: any, v: number) => void,\n}\n\nexport class SimpleSlider extends React.Component<SliderProps, SliderState> {\n    constructor(props: SliderProps, context?: any) {\n        super(props, context);\n        this.state = {\n            value: 0,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e: any, v: number) {\n        if (this.props.onChange) {\n            this.props.onChange(e, v);\n        }\n\n        this.setState({ value: v })\n    }\n\n    render() {\n        return (\n            <div>\n                <Typography variant=\"h6\">Steps: {this.state.value}</Typography>\n                <Slider\n                    min={this.props.min}\n                    max={this.props.max}\n                    value={this.state.value}\n                    step={1}\n                    onChange={this.handleChange} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Typography } from \"@material-ui/core\";\nimport * as Problem from \"./Problem\";\nimport { ResultCanvas } from \"./ResultCanvas\";\nimport * as Utils from \"./Utils\";\nimport { isNull } from 'util';\n\ninterface AppState {\n  input: Problem.Input | null,\n  output: Problem.Output | null,\n  message: any,\n  steps: number\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: {}, context?: any) {\n    super(props, context);\n    this.state = {\n      input: null,\n      output: null,\n      message: \"\",\n      steps: 0,\n    };\n\n    this.loadInputFile = this.loadInputFile.bind(this);\n    this.loadOutputFile = this.loadOutputFile.bind(this);\n  }\n\n  loadInputFile(event: any) {\n    if (event.target.files !== null) {\n      Utils.readFile(event.target.files[0])\n        .then((text) => this.setState({ input: Problem.parseInput(text) }))\n        .catch((err) => {\n          console.error(err);\n          this.setState({ message: err });\n        });\n    }\n  }\n\n  loadOutputFile(event: any) {\n    if (event.target.files !== null) {\n      Utils.readFile(event.target.files[0])\n        .then((text) => this.setState({ output: Problem.parseOutput(text) }))\n        .catch((err) => {\n          console.error(err);\n          this.setState({ message: err });\n        });\n    }\n  }\n\n  render() {\n    let canvasHeight = isNull(this.state.input) ? 0 : this.state.input.R;\n    let canvasWidth = isNull(this.state.input) ? 0 : this.state.input.C;\n\n    let totalSteps = isNull(this.state.output) ? 0 : this.state.output.slices.length;\n\n    return (\n      <div>\n        <Typography variant=\"h2\" gutterBottom>\n          2019 Practice \"Pizza\"\n          </Typography>\n        <Grid container spacing={24}>\n          <Grid item xs={3}>\n            <Typography variant=\"h6\">Input:</Typography>\n            <input accept=\"application/text\" type=\"file\" id=\"input-file\" onChange={this.loadInputFile} />\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"h6\">Output:</Typography>\n            <input accept=\"application/text\" type=\"file\" id=\"output-file\" onChange={this.loadOutputFile} />\n          </Grid>\n          <Grid item xs={3}>\n            <Utils.SimpleSlider min={0} max={totalSteps} onChange={(_, v) => this.setState({ steps: v })} />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">{this.state.message}</Typography>\n          </Grid>\n\n          <Grid item xs={12}>\n            <ResultCanvas\n              width={canvasWidth}\n              height={canvasHeight}\n              input={this.state.input}\n              output={this.state.output}\n              steps={this.state.steps} />\n          </Grid>\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}